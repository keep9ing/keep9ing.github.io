[{"id":0,"href":"/about/","title":"About","section":"dev log","content":"this is my dev log.\n"},{"id":1,"href":"/2025-07-21/","title":"asp","section":"dev log","content":"\r🧱 기본 구조\r#\rASP 코드는 \u0026lt;% 와 %\u0026gt; 사이에 작성돼요.\n\u0026lt;% Response.Write \u0026#34;Hello ASP!\u0026#34; %\u0026gt; 📌 변수 선언\r#\rDim 키워드로 변수 선언 Dim userName userName = \u0026#34;JIHYE\u0026#34; 🔁 조건문\r#\rIf...Then...Else\n\u0026lt;% Dim age age = 25 If age \u0026gt;= 20 Then Response.Write \u0026#34;성인입니다.\u0026#34; Else Response.Write \u0026#34;미성년자입니다.\u0026#34; End If %\u0026gt; Select Case (조건이 많을 때)\n\u0026lt;% Dim grade grade = \u0026#34;A\u0026#34; Select Case grade Case \u0026#34;A\u0026#34; Response.Write \u0026#34;우수\u0026#34; Case \u0026#34;B\u0026#34; Response.Write \u0026#34;양호\u0026#34; Case Else Response.Write \u0026#34;재시험\u0026#34; End Select %\u0026gt; 🔄 반복문\r#\r`For\u0026hellip;Next\n\u0026lt;% Dim i For i = 1 To 5 Response.Write i \u0026amp; \u0026#34;\u0026lt;br\u0026gt;\u0026#34; Next %\u0026gt; Do While...Loop\n\u0026lt;% Dim i i = 1 Do While i \u0026lt;= 5 Response.Write i \u0026amp; \u0026#34;\u0026lt;br\u0026gt;\u0026#34; i = i + 1 Loop %\u0026gt; 🧮 내장 함수 예시\r#\r함수 설명 예시 Now() 현재 날짜/시간 반환 Response.Write Now() UCase() 문자열을 대문자로 변환 UCase(\u0026quot;jihye\u0026quot;) → \u0026quot;JIHYE\u0026quot; Len() 문자열 길이 반환 Len(\u0026quot;ASP\u0026quot;) → 3 Replace() 문자열 치환 Replace(\u0026quot;Hi Jihye\u0026quot;, \u0026quot;Hi\u0026quot;, \u0026quot;Hello\u0026quot;) 📝 1. 폼 처리 (Form Handling)\r#\r사용자 입력을 받아 처리하는 기본 방식이에요.\n📌 HTML 폼 예시\r#\rhtml\n\u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;process.asp\u0026#34;\u0026gt; 이름: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;전송\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 📌 ASP 처리 코드 (process.asp)\r#\rasp\n\u0026lt;% Dim userName userName = Request.Form(\u0026#34;username\u0026#34;) Response.Write \u0026#34;입력한 이름은: \u0026#34; \u0026amp; userName %\u0026gt; Request.Form(\u0026quot;username\u0026quot;): POST 방식으로 전달된 값 Request.QueryString(\u0026quot;username\u0026quot;): GET 방식으로 전달된 값 🔐 2. 세션 사용 (Session Handling)\r#\r사용자 정보를 페이지 간에 유지할 때 사용돼요.\n📌 세션 저장\r#\r\u0026lt;% Session(\u0026#34;userID\u0026#34;) = \u0026#34;jihye123\u0026#34; %\u0026gt; 📌 세션 불러오기\r#\r\u0026lt;% Response.Write \u0026#34;로그인한 사용자: \u0026#34; \u0026amp; Session(\u0026#34;userID\u0026#34;) %\u0026gt; 📌 세션 삭제\r#\r\u0026lt;% Session.Contents.Remove(\u0026#34;userID\u0026#34;) \u0026#39; 특정 세션 삭제 Session.Abandon() \u0026#39; 전체 세션 종료 %\u0026gt; 세션은 브라우저를 닫거나 일정 시간이 지나면 자동 종료돼요. 기본 타임아웃은 20분이며 Session.Timeout = 30으로 변경 가능 🗄️ 3. 데이터베이스 연결 (DB Connection)\r#\rASP에서 DB와 연결해 데이터를 조회하거나 저장할 수 있어요.\n📌 연결 및 조회 예시\r#\r\u0026lt;% Dim conn, rs, sql Set conn = Server.CreateObject(\u0026#34;ADODB.Connection\u0026#34;) conn.Open \u0026#34;Provider=SQLOLEDB;Data Source=서버주소;Initial Catalog=DB이름;User ID=아이디;Password=비번\u0026#34; sql = \u0026#34;SELECT * FROM Users\u0026#34; Set rs = conn.Execute(sql) Do While Not rs.EOF Response.Write rs(\u0026#34;Name\u0026#34;) \u0026amp; \u0026#34;\u0026lt;br\u0026gt;\u0026#34; rs.MoveNext Loop rs.Close Set rs = Nothing conn.Close Set conn = Nothing %\u0026gt; ADODB.Connection: DB 연결 객체 ADODB.Recordset: 결과를 담는 객체 SQL Injection 방지를 위해 파라미터 처리에 주의해야 해요 "},{"id":2,"href":"/2025-07-16/","title":"2025 07 16","section":"dev log","content":" [!question] asp라는건.. C#을 기반으로 하는 건가?\n네, 맞습니다! ASP.NET은 C#을 기반으로 하는 웹 개발 프레임워크입니다.\n🔍 ASP.NET과 C#의 관계\r#\r📋 ASP.NET이란?\r#\rMicrosoft에서 개발한 웹 개발 프레임워크 .NET Framework 위에서 동작 서버사이드 웹 애플리케이션 개발용 💻 지원하는 언어들\r#\rASP.NET은 여러 언어를 지원하지만, 주로 사용되는 언어들:\n// C# (가장 많이 사용됨) \u0026lt;%@ Page Language=\u0026#34;C#\u0026#34; %\u0026gt; // VB.NET \u0026lt;%@ Page Language=\u0026#34;VB\u0026#34; %\u0026gt; // F# \u0026lt;%@ Page Language=\u0026#34;F#\u0026#34; %\u0026gt; 🔧 현재 프로젝트에서 C# 사용 부분\r#\r\u0026lt;script runat=\u0026#34;server\u0026#34;\u0026gt; // 이 부분이 모두 C# 코드입니다 protected void btnSubmit_Click(object sender, EventArgs e) { try { if (string.IsNullOrEmpty(txtName.Text)) // C# 문법 { ShowError(\u0026#34;이름을 입력해주세요.\u0026#34;); return; } // C# 반복문 foreach (ListItem item in cblHobbies.Items) { if (item.Selected) { // C# 문자열 처리 selectedHobbies += item.Text; } } } catch (Exception ex) // C# 예외 처리 { ShowError(\u0026#34;오류: \u0026#34; + ex.Message); } } } \u0026lt;/script\u0026gt; 📊 ASP.NET의 구조\r#\r┌─────────────────────────────────┐ │ ASP.NET Web Forms │ ← 웹 UI 프레임워크 ├─────────────────────────────────┤ │ C# │ ← 프로그래밍 언어 ├─────────────────────────────────┤ │ .NET Framework │ ← 런타임 플랫폼 ├─────────────────────────────────┤ │ IIS │ ← 웹 서버 └─────────────────────────────────┘ 🚀 C# 주요 특징 (ASP.NET에서 사용)\r#\r객체지향 프로그래밍 강타입 언어 이벤트 기반 프로그래밍 자동 메모리 관리 풍부한 라이브러리 📋 ASP.NET Web Forms vs ASP.NET Core\r#\r구분 ASP.NET Web Forms ASP.NET Core 기반 .NET Framework + C# .NET Core/5+ + C# 플랫폼 Windows만 크로스 플랫폼 방식 이벤트 기반 MVC 패턴 현재 상태 레거시 최신 현재 작업하고 있는 것은 ASP.NET Web Forms이며, 이는 C#을 사용하여 서버사이드 로직을 처리하고 HTML을 동적으로 생성하는 방식입니다!\n따라서 C# 문법을 배우면 ASP.NET 개발에 직접 도움이 됩니다.\n[!question] 강타입 언어는 어떤걸 말하는거야?\n**강타입 언어(Strongly Typed Language)**는 변수의 데이터 타입을 엄격하게 관리하는 프로그래밍 언어를 말합니다.\n🔍 강타입 언어의 특징\r#\r📋 타입 안전성 (Type Safety)\r#\r// C# (강타입) - 컴파일 시 타입 체크 int number = 10; // 정수형 string text = \u0026#34;Hello\u0026#34;; // 문자열형 bool flag = true; // 불린형 // 이런 코드는 컴파일 오류 발생! number = \u0026#34;abc\u0026#34;; // ❌ Error: 문자열을 정수에 할당 불가 text = 123; // ❌ Error: 숫자를 문자열에 할당 불가 // JavaScript (약타입) - 런타임에서 자동 변환 var number = 10; // 숫자 number = \u0026#34;abc\u0026#34;; // ✅ OK: 자동으로 문자열로 변환 var result = 10 + \u0026#34;5\u0026#34;; // ✅ OK: \u0026#34;105\u0026#34; (문자열 결합) 🔧 현재 ASP.NET 코드에서 강타입 예시\r#\r\u0026lt;script runat=\u0026#34;server\u0026#34;\u0026gt; // 강타입 변수 선언 protected void btnSubmit_Click(object sender, EventArgs e) { // string 타입 명시 string selectedHobbies = \u0026#34;\u0026#34;; // 문자열 int hobbyCount = 0; // 정수 // foreach에서 타입 명시 foreach (ListItem item in cblHobbies.Items) // ListItem 타입 { if (item.Selected) // bool 타입 체크 { if (hobbyCount \u0026gt; 0) selectedHobbies += \u0026#34;, \u0026#34;; selectedHobbies += item.Text; // string 타입 hobbyCount++; // int 연산 } } // DateTime 타입 사용 DateTime.Now.ToString(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); } // 메서드 매개변수와 반환 타입 명시 private void ShowError(string message) // string 입력, void 반환 { litError.Text = message; // string 할당 pnlError.Visible = true; // bool 할당 } \u0026lt;/script\u0026gt; 🆚 강타입 vs 약타입 비교\r#\r구분 강타입 (C#) 약타입 (JavaScript) 타입 선언 int age = 25; var age = 25; 타입 변경 불가능 (컴파일 오류) 가능 (런타임 변환) 오류 발견 컴파일 시점 런타임 시점 성능 빠름 (최적화됨) 상대적으로 느림 안전성 높음 낮음 💡 강타입의 장점\r#\r1. 컴파일 시 오류 발견\r#\rint count = \u0026#34;abc\u0026#34;; // ❌ 컴파일 시 즉시 오류 발견 2. IntelliSense 지원\r#\rstring text = \u0026#34;Hello\u0026#34;; text. // ← IDE에서 문자열 메서드들 자동 완성 3. 런타임 오류 감소\r#\r// 타입이 보장되므로 예상치 못한 오류 방지 DateTime today = DateTime.Now; // 확실히 DateTime 타입 4. 코드 가독성 향상\r#\r// 변수의 용도가 명확함 List\u0026lt;string\u0026gt; hobbies = new List\u0026lt;string\u0026gt;(); Dictionary\u0026lt;int, string\u0026gt; users = new Dictionary\u0026lt;int, string\u0026gt;(); 🔍 ASP.NET에서 강타입의 실제 사용\r#\r// 서버 컨트롤들도 강타입 TextBox txtName; // TextBox 타입 DropDownList ddlAge; // DropDownList 타입 CheckBoxList cblHobbies; // CheckBoxList 타입 // 이벤트 핸들러도 강타입 protected void btnSubmit_Click(object sender, EventArgs e) // ^^^^^^ ^^^^^^^^^^ // Button 타입 EventArgs 타입 결론: 강타입 언어는 개발 시 더 많은 규칙을 요구하지만, 그 덕분에 더 안전하고 예측 가능한 코드를 작성할 수 있습니다!\n"},{"id":3,"href":"/2025-07-17/","title":"2025 07 17","section":"dev log","content":"IA(Information Architecture: 정보 구조도) 작성\n현재 작성한 IA는 데스크톱 기준의 메뉴 흐름을 기반\n[!todo] 모바일 페이지 따로 작성할 것 👀\n[!question] 오라클 말고 인포믹스??\n인포믹스(Informix)는 오라클과는 다른 계열의 **관계형 데이터베이스 관리 시스템(RDBMS)**이에요. IBM이 소유하고 있고, 현재는 HCL Technologies와 공동 개발 및 지원을 진행 중이에요2.\n🔍 오라클과 인포믹스의 주요 차이점\r#\r항목 오라클 (Oracle) 인포믹스 (Informix) 개발사 Oracle Corporation IBM / HCL Technologies 주요 특징 강력한 엔터프라이즈 기능, 복잡한 설정 경량, 자동화, 임베디드 환경에 최적화 사용 환경 대규모 기업, 금융, 공공기관 제조, 유통, IoT, 엣지 컴퓨팅 등 관리 편의성 DBA가 필요, 복잡한 튜닝 무관리 환경에서도 안정적 운영 가능 데이터 모델링 관계형 중심 관계형 + 객체지향 + NoSQL + 시계열 지원 라이선스 비용 상대적으로 고가 다양한 무료/저비용 버전 제공 💡 인포믹스의 강점\r#\r임베디드 환경에 최적화: 소형 디바이스나 게이트웨이에 탑재 가능 (100MB 이하로도 설치 가능) 시계열 데이터 지원: IoT 센서 데이터 처리에 강력 자기 관리 기능: DBA 없이도 운영 가능할 정도로 자동화 SQL + NoSQL + JSON 통합 지원: 다양한 데이터 형식을 하나의 엔진에서 처리 가능 [!question] 시계열 데이터 지원한다는게 무슨 말이야? 자기관리기능도 무슨 말인지 알기 쉽게 설명해줘.. DBA없이도 운영가능하다고 했는데 DBA는 뭐지?\n용어가 어렵게 느껴질 수 있지만, 하나씩 쉽게 풀어볼게요 😊\n⏱️ 시계열 데이터 지원이란?\r#\r**\u0026ldquo;시간에 따라 변화하는 데이터\u0026rdquo;**를 잘 처리할 수 있는 기능이에요.\n예: 온도 센서가 1분마다 측정하는 값, 주식 가격의 시간별 변화, 스마트워치의 심박수 로그 등.\n데이터가 \u0026ldquo;언제\u0026rdquo; 기록됐는지가 중요하고, 시간을 중심으로 분석하거나 패턴을 찾는 데 강해요.\n➡️ 인포믹스는 이런 시계열 데이터를 효율적으로 저장하고 빠르게 분석하는 기능이 내장돼 있어서 IoT나 실시간 모니터링 시스템에 많이 쓰여요.\n🧠 **자기 관리 기능(Self-Managing)**이란?\r#\r말 그대로 데이터베이스가 스스로 상태를 모니터링하고 최적화한다는 의미예요.\n예를 들면:\n성능이 느려지면 자동으로 인덱스 정리\n공간이 부족해지면 경고 알림 또는 자동 압축\n장애가 생기면 자동 복구 또는 로그 남김\n➡️ 이 덕분에 사용자가 직접 조정하지 않아도 안정적으로 돌아가요.\n👨‍💼 DBA란?\r#\rDatabase Administrator의 약자예요.\n데이터베이스를 설치하고, 백업하고, 성능을 관리하는 전문가예요.\n복잡한 시스템일수록 필요한 역할인데, 인포믹스는 이런 DBA 없이도 운영할 수 있도록 간편하고 자동화된 기능을 많이 갖추고 있는 거죠!\n🙌 정리하면:\n인포믹스는 시간 중심의 데이터 처리에 강하고, 스스로 잘 관리되는 시스템이라서, 전문가 없이도 쓸 수 있는 “똑똑한 데이터베이스”라고 할 수 있어요.\n"}]