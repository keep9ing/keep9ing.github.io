[{"id":0,"href":"/docs/folder/sample/","title":"sample","section":"Folder","content":"sample\n"},{"id":1,"href":"/docs/sql-%EC%BF%BC%EB%A6%AC-%EC%97%B0%EC%8A%B5/","title":"sql문 연습","section":"Docs","content":"https://solvesql.com/problems/publisher-with-many-games/\nSELECT companies.name, publisher_id, COUNT(*) AS publishing_count FROM games JOIN companies ON games.publisher_id = companies.company_id GROUP BY publisher_id HAVING COUNT(*) \u0026gt;= 10; SELECT * FROM orders JOIN order_items product ON product.order_id = orders.order_id LIMIT 3; -- 3줄 까지만 출력 https://solvesql.com/problems/max-row/\nSELECT id -- id만 출력.. FROM points WHERE x = (SELECT MAX(x) FROM points) -- 서브쿼리 OR y = (SELECT MAX(y) FROM points) -- 서브쿼리 ORDER BY id ASC; -- 오름차순 정렬 https://solvesql.com/problems/weekday-stats-airpollution/\nSELECT -- `CASE` 문으로 숫자를 한글 요일로 변환 CASE strftime(\u0026#39;%u\u0026#39;, measured_at) WHEN \u0026#39;1\u0026#39; THEN \u0026#39;월요일\u0026#39; WHEN \u0026#39;2\u0026#39; THEN \u0026#39;화요일\u0026#39; WHEN \u0026#39;3\u0026#39; THEN \u0026#39;수요일\u0026#39; WHEN \u0026#39;4\u0026#39; THEN \u0026#39;목요일\u0026#39; WHEN \u0026#39;5\u0026#39; THEN \u0026#39;금요일\u0026#39; WHEN \u0026#39;6\u0026#39; THEN \u0026#39;토요일\u0026#39; WHEN \u0026#39;7\u0026#39; THEN \u0026#39;일요일\u0026#39; END AS weekday, -- ROUND(..., 4) : 소수점 넷째 자리까지 반올림 ROUND(AVG(no2), 4) AS no2, ROUND(AVG(o3), 4) AS o3, ROUND(AVG(co), 4) AS co, ROUND(AVG(so2), 4) AS so2, ROUND(AVG(pm10), 4) AS pm10, ROUND(AVG(pm2_5), 4) AS pm2_5 FROM measurements GROUP BY strftime(\u0026#39;%u\u0026#39;, measured_at) ORDER BY strftime(\u0026#39;%u\u0026#39;, measured_at); %w는 일요일을 0으로 시작하는 요일 숫자 (0~6) %u는 월요일을 1로 시작하는 요일 숫자 (1~7) → 우리가 원하는 요일 순서에 딱 맞아요! %w 나.. %u 이런 게\u0026hellip; 오라클 작성할 때도 동일한가?\n%w, %u 같은 포맷은 SQLite나 PostgreSQL 등 일부 DB에서 사용하는 strftime() 함수의 포맷이에요. **오라클(Oracle)**에서는 방식이 조금 달라요.\n🏛️ 오라클에서 요일 숫자 구하는 방법\r#\r오라클에서는 TO_CHAR() 함수를 사용해서 날짜의 요일을 숫자로 변환해요:\nSELECT TO_CHAR(SYSDATE, \u0026#39;D\u0026#39;) AS 요일숫자 FROM dual; 'D'는 요일을 숫자로 반환하는 포맷이에요. 반환되는 숫자는 NLS_TERRITORY 설정에 따라 달라질 수 있어요. 예: 1 = 일요일, 2 = 월요일 … 이런 식으로 시작 요일이 달라질 수 있어요. 📌 요일을 한글로 바꾸고 싶다면?\r#\rSELECT TO_CHAR(SYSDATE, \u0026#39;D\u0026#39;) AS 요일숫자, DECODE(TO_CHAR(SYSDATE, \u0026#39;D\u0026#39;), \u0026#39;1\u0026#39;, \u0026#39;일요일\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;월요일\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;화요일\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;수요일\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;목요일\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;금요일\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;토요일\u0026#39;) AS 한글요일 FROM dual; 이렇게 DECODE()를 활용하면 숫자를 한글 요일로 매핑할 수 있어요.\n"},{"id":2,"href":"/draft/2025-07-31/","title":"C# 뭔데","section":"Drafts","content":"✳️ \u0026hellip; C#을.. 공부하게 되어버렸네\u0026hellip;📚✨\nC#에서 자주 등장하는 접근 제한자와 메서드 관련 키워드들을 한꺼번에, 깔끔하고 간결하게 정리해볼게요!\n🔐 접근 제한자 요약표\r#\r키워드 접근 가능 범위 private 현재 클래스 내부만 접근 가능 protected 현재 클래스 + 상속받은 자식 클래스만 접근 internal 같은 프로젝트(어셈블리) 내에서 접근 가능 protected internal 상속받은 자식 클래스 + 같은 어셈블리 접근 가능 public 어디서든 자유롭게 접근 가능 class Parent { private int secret = 100; protected int shared = 200; public void ShowInfo() { Console.WriteLine(secret); // OK Console.WriteLine(shared); // OK } } class Child : Parent { public void Display() { // Console.WriteLine(secret); // ❌ 오류: private 접근 불가 Console.WriteLine(shared); // ✅ OK: protected는 자식도 접근 가능 } } 🔧 메서드 관련 키워드 요약\r#\r키워드 설명 virtual 부모 클래스에서 오버라이드(재정의) 가능하도록 선언함 override 자식 클래스에서 부모의 virtual 메서드를 재정의할 때 사용 new 부모 클래스의 멤버와 **동명이인(이름 중복)**일 때, 새로 정의함 abstract 구현 없이 서브클래스에서 반드시 정의해야 하는 메서드나 클래스 sealed 더 이상 상속하거나 오버라이드하지 못하게 봉인함 ✨ 간단 비유로 기억하기!\r#\rprivate → 내 방 비밀번호! 아무도 못 들어와!\nprotected → 가족만 출입 가능! 자식 클래스는 OK\npublic → 공개된 광장! 누구나 자유롭게 사용\nvirtual + override → 부모가 \u0026ldquo;원하면 이렇게 행동해!\u0026rdquo; → 자식이 \u0026ldquo;알겠어요! 하지만 좀 다르게 해볼게요!\u0026rdquo;\nsealed → 더 이상 수정 불가! 고정된 규칙\n🔑 using 키워드의 두 가지 주요 용도\r#\r용도 설명 예시 1. 네임스페이스 가져오기 클래스나 메서드를 사용할 때 전체 경로를 안 써도 되도록 함 using System; → Console.WriteLine(); 사용 가능 2. 리소스 자동 해제 IDisposable 인터페이스를 구현한 객체를 사용한 후 자동으로 정리해줌 파일/DB 연결 등 using (var fs = ...) { } 📌 즉, using은 코드 간결성 + 메모리 누수 방지 모두 챙겨주는 유용한 키워드예요. 자원 관리를 위한 구문. 데이터베이스 연결, 파일 등 외부 자원을 사용할 때, 자동으로 자원을 해제(Dispose)해줘요. 예를 들어, using (SqlConnection conn = new SqlConnection(\u0026hellip;))처럼 쓰면, 블록이 끝날 때 conn.Dispose()가 자동으로 호출돼서 메모리 누수나 자원 잠금을 방지해줘요.\n💡 이와 함께 알아두면 좋은 핵심 키워드\r#\r키워드 용도 및 설명 namespace 코드의 범주를 나눠 충돌 방지 class 객체를 만들기 위한 설계도 static 객체를 만들지 않고도 접근 가능한 멤버 void 값을 반환하지 않는 메서드 정의 return 값을 반환하거나 함수 종료 async / await 비동기 프로그래밍에 사용 try / catch / finally 예외 처리 흐름 제어 "},{"id":3,"href":"/draft/2025-07-21/","title":"asp 뭔데","section":"Drafts","content":"\r🧱 기본 구조\r#\rASP 코드는 \u0026lt;% 와 %\u0026gt; 사이에 작성돼요.\n\u0026lt;% Response.Write \u0026#34;Hello ASP!\u0026#34; %\u0026gt; 📌 변수 선언\r#\rDim 키워드로 변수 선언 Dim userName userName = \u0026#34;JIHYE\u0026#34; 🔁 조건문\r#\rIf...Then...Else\n\u0026lt;% Dim age age = 25 If age \u0026gt;= 20 Then Response.Write \u0026#34;성인입니다.\u0026#34; Else Response.Write \u0026#34;미성년자입니다.\u0026#34; End If %\u0026gt; Select Case (조건이 많을 때)\n\u0026lt;% Dim grade grade = \u0026#34;A\u0026#34; Select Case grade Case \u0026#34;A\u0026#34; Response.Write \u0026#34;우수\u0026#34; Case \u0026#34;B\u0026#34; Response.Write \u0026#34;양호\u0026#34; Case Else Response.Write \u0026#34;재시험\u0026#34; End Select %\u0026gt; 🔄 반복문\r#\r`For\u0026hellip;Next\n\u0026lt;% Dim i For i = 1 To 5 Response.Write i \u0026amp; \u0026#34;\u0026lt;br\u0026gt;\u0026#34; Next %\u0026gt; Do While...Loop\n\u0026lt;% Dim i i = 1 Do While i \u0026lt;= 5 Response.Write i \u0026amp; \u0026#34;\u0026lt;br\u0026gt;\u0026#34; i = i + 1 Loop %\u0026gt; 🧮 내장 함수 예시\r#\r함수 설명 예시 Now() 현재 날짜/시간 반환 Response.Write Now() UCase() 문자열을 대문자로 변환 UCase(\u0026quot;jihye\u0026quot;) → \u0026quot;JIHYE\u0026quot; Len() 문자열 길이 반환 Len(\u0026quot;ASP\u0026quot;) → 3 Replace() 문자열 치환 Replace(\u0026quot;Hi Jihye\u0026quot;, \u0026quot;Hi\u0026quot;, \u0026quot;Hello\u0026quot;) 📝 1. 폼 처리 (Form Handling)\r#\r사용자 입력을 받아 처리하는 기본 방식이에요.\n📌 HTML 폼 예시\r#\rhtml\n\u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;process.asp\u0026#34;\u0026gt; 이름: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;전송\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 📌 ASP 처리 코드 (process.asp)\r#\rasp\n\u0026lt;% Dim userName userName = Request.Form(\u0026#34;username\u0026#34;) Response.Write \u0026#34;입력한 이름은: \u0026#34; \u0026amp; userName %\u0026gt; Request.Form(\u0026quot;username\u0026quot;): POST 방식으로 전달된 값 Request.QueryString(\u0026quot;username\u0026quot;): GET 방식으로 전달된 값 🔐 2. 세션 사용 (Session Handling)\r#\r사용자 정보를 페이지 간에 유지할 때 사용돼요.\n📌 세션 저장\r#\r\u0026lt;% Session(\u0026#34;userID\u0026#34;) = \u0026#34;jihye123\u0026#34; %\u0026gt; 📌 세션 불러오기\r#\r\u0026lt;% Response.Write \u0026#34;로그인한 사용자: \u0026#34; \u0026amp; Session(\u0026#34;userID\u0026#34;) %\u0026gt; 📌 세션 삭제\r#\r\u0026lt;% Session.Contents.Remove(\u0026#34;userID\u0026#34;) \u0026#39; 특정 세션 삭제 Session.Abandon() \u0026#39; 전체 세션 종료 %\u0026gt; 세션은 브라우저를 닫거나 일정 시간이 지나면 자동 종료돼요. 기본 타임아웃은 20분이며 Session.Timeout = 30으로 변경 가능 🗄️ 3. 데이터베이스 연결 (DB Connection)\r#\rASP에서 DB와 연결해 데이터를 조회하거나 저장할 수 있어요.\n📌 연결 및 조회 예시\r#\r\u0026lt;% Dim conn, rs, sql Set conn = Server.CreateObject(\u0026#34;ADODB.Connection\u0026#34;) conn.Open \u0026#34;Provider=SQLOLEDB;Data Source=서버주소;Initial Catalog=DB이름;User ID=아이디;Password=비번\u0026#34; sql = \u0026#34;SELECT * FROM Users\u0026#34; Set rs = conn.Execute(sql) Do While Not rs.EOF Response.Write rs(\u0026#34;Name\u0026#34;) \u0026amp; \u0026#34;\u0026lt;br\u0026gt;\u0026#34; rs.MoveNext Loop rs.Close Set rs = Nothing conn.Close Set conn = Nothing %\u0026gt; ADODB.Connection: DB 연결 객체 ADODB.Recordset: 결과를 담는 객체 SQL Injection 방지를 위해 파라미터 처리에 주의해야 해요 🛡️ SQL Injection은 웹 애플리케이션의 보안 취약점을 악용해 데이터베이스를 조작하거나 탈취하는 해킹 기법이에요. 주로 사용자의 입력값을 제대로 검증하지 않을 때 발생하죠.\n💣 SQL Injection이란?\r#\r공격자가 악의적인 SQL 구문을 입력 필드에 삽입해, 원래 의도된 쿼리를 변경시켜버리는 방식이에요. 예를 들어 로그인 폼에 admin' OR '1'='1 같은 값을 넣으면, 조건이 항상 참이 되어 인증 없이 로그인할 수 있게 되죠. 🔐 방어 방법\r#\rPreparedStatement / Parameterized Query 사용 → 쿼리와 데이터를 분리해서 SQL 구문 삽입을 막아요. 입력값 검증 → 화이트리스트 기반으로 허용된 값만 통과시키기 ORM 사용 → JPA, Hibernate 같은 프레임워크는 내부적으로 안전한 쿼리 생성 에러 메시지 숨기기 → DB 구조가 노출되지 않도록 에러를 사용자에게 보여주지 않기 "},{"id":4,"href":"/draft/2025-07-16/","title":"asp.. c# ?","section":"Drafts","content":" [!question] asp라는건.. C#을 기반으로 하는 건가?\n네, 맞습니다! ASP.NET은 C#을 기반으로 하는 웹 개발 프레임워크입니다.\n🔍 ASP.NET과 C#의 관계\r#\r📋 ASP.NET이란?\r#\rMicrosoft에서 개발한 웹 개발 프레임워크 .NET Framework 위에서 동작 서버사이드 웹 애플리케이션 개발용 💻 지원하는 언어들\r#\rASP.NET은 여러 언어를 지원하지만, 주로 사용되는 언어들:\n// C# (가장 많이 사용됨) \u0026lt;%@ Page Language=\u0026#34;C#\u0026#34; %\u0026gt; // VB.NET \u0026lt;%@ Page Language=\u0026#34;VB\u0026#34; %\u0026gt; // F# \u0026lt;%@ Page Language=\u0026#34;F#\u0026#34; %\u0026gt; 🔧 현재 프로젝트에서 C# 사용 부분\r#\r\u0026lt;script runat=\u0026#34;server\u0026#34;\u0026gt; // 이 부분이 모두 C# 코드입니다 protected void btnSubmit_Click(object sender, EventArgs e) { try { if (string.IsNullOrEmpty(txtName.Text)) // C# 문법 { ShowError(\u0026#34;이름을 입력해주세요.\u0026#34;); return; } // C# 반복문 foreach (ListItem item in cblHobbies.Items) { if (item.Selected) { // C# 문자열 처리 selectedHobbies += item.Text; } } } catch (Exception ex) // C# 예외 처리 { ShowError(\u0026#34;오류: \u0026#34; + ex.Message); } } } \u0026lt;/script\u0026gt; 📊 ASP.NET의 구조\r#\r┌─────────────────────────────────┐ │ ASP.NET Web Forms │ ← 웹 UI 프레임워크 ├─────────────────────────────────┤ │ C# │ ← 프로그래밍 언어 ├─────────────────────────────────┤ │ .NET Framework │ ← 런타임 플랫폼 ├─────────────────────────────────┤ │ IIS │ ← 웹 서버 └─────────────────────────────────┘ 🚀 C# 주요 특징 (ASP.NET에서 사용)\r#\r객체지향 프로그래밍 강타입 언어 이벤트 기반 프로그래밍 자동 메모리 관리 풍부한 라이브러리 📋 ASP.NET Web Forms vs ASP.NET Core\r#\r구분 ASP.NET Web Forms ASP.NET Core 기반 .NET Framework + C# .NET Core/5+ + C# 플랫폼 Windows만 크로스 플랫폼 방식 이벤트 기반 MVC 패턴 현재 상태 레거시 최신 현재 작업하고 있는 것은 ASP.NET Web Forms이며, 이는 C#을 사용하여 서버사이드 로직을 처리하고 HTML을 동적으로 생성하는 방식입니다!\n따라서 C# 문법을 배우면 ASP.NET 개발에 직접 도움이 됩니다.\n[!question] 강타입 언어는 어떤걸 말하는거야?\n**강타입 언어(Strongly Typed Language)**는 변수의 데이터 타입을 엄격하게 관리하는 프로그래밍 언어를 말합니다.\n🔍 강타입 언어의 특징\r#\r📋 타입 안전성 (Type Safety)\r#\r// C# (강타입) - 컴파일 시 타입 체크 int number = 10; // 정수형 string text = \u0026#34;Hello\u0026#34;; // 문자열형 bool flag = true; // 불린형 // 이런 코드는 컴파일 오류 발생! number = \u0026#34;abc\u0026#34;; // ❌ Error: 문자열을 정수에 할당 불가 text = 123; // ❌ Error: 숫자를 문자열에 할당 불가 // JavaScript (약타입) - 런타임에서 자동 변환 var number = 10; // 숫자 number = \u0026#34;abc\u0026#34;; // ✅ OK: 자동으로 문자열로 변환 var result = 10 + \u0026#34;5\u0026#34;; // ✅ OK: \u0026#34;105\u0026#34; (문자열 결합) 🔧 현재 ASP.NET 코드에서 강타입 예시\r#\r\u0026lt;script runat=\u0026#34;server\u0026#34;\u0026gt; // 강타입 변수 선언 protected void btnSubmit_Click(object sender, EventArgs e) { // string 타입 명시 string selectedHobbies = \u0026#34;\u0026#34;; // 문자열 int hobbyCount = 0; // 정수 // foreach에서 타입 명시 foreach (ListItem item in cblHobbies.Items) // ListItem 타입 { if (item.Selected) // bool 타입 체크 { if (hobbyCount \u0026gt; 0) selectedHobbies += \u0026#34;, \u0026#34;; selectedHobbies += item.Text; // string 타입 hobbyCount++; // int 연산 } } // DateTime 타입 사용 DateTime.Now.ToString(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); } // 메서드 매개변수와 반환 타입 명시 private void ShowError(string message) // string 입력, void 반환 { litError.Text = message; // string 할당 pnlError.Visible = true; // bool 할당 } \u0026lt;/script\u0026gt; 🆚 강타입 vs 약타입 비교\r#\r구분 강타입 (C#) 약타입 (JavaScript) 타입 선언 int age = 25; var age = 25; 타입 변경 불가능 (컴파일 오류) 가능 (런타임 변환) 오류 발견 컴파일 시점 런타임 시점 성능 빠름 (최적화됨) 상대적으로 느림 안전성 높음 낮음 💡 강타입의 장점\r#\r1. 컴파일 시 오류 발견\r#\rint count = \u0026#34;abc\u0026#34;; // ❌ 컴파일 시 즉시 오류 발견 2. IntelliSense 지원\r#\rstring text = \u0026#34;Hello\u0026#34;; text. // ← IDE에서 문자열 메서드들 자동 완성 3. 런타임 오류 감소\r#\r// 타입이 보장되므로 예상치 못한 오류 방지 DateTime today = DateTime.Now; // 확실히 DateTime 타입 4. 코드 가독성 향상\r#\r// 변수의 용도가 명확함 List\u0026lt;string\u0026gt; hobbies = new List\u0026lt;string\u0026gt;(); Dictionary\u0026lt;int, string\u0026gt; users = new Dictionary\u0026lt;int, string\u0026gt;(); 🔍 ASP.NET에서 강타입의 실제 사용\r#\r// 서버 컨트롤들도 강타입 TextBox txtName; // TextBox 타입 DropDownList ddlAge; // DropDownList 타입 CheckBoxList cblHobbies; // CheckBoxList 타입 // 이벤트 핸들러도 강타입 protected void btnSubmit_Click(object sender, EventArgs e) // ^^^^^^ ^^^^^^^^^^ // Button 타입 EventArgs 타입 결론: 강타입 언어는 개발 시 더 많은 규칙을 요구하지만, 그 덕분에 더 안전하고 예측 가능한 코드를 작성할 수 있습니다!\n🕰️ ASP Classic (Active Server Pages)\r#\r출시 시기: 1996년대 후반, .NET 이전 시대\n언어 기반: VBScript 또는 JScript\n코드 구조: HTML과 서버 코드가 한 파일에 섞여 있음 (\u0026lt;% %\u0026gt; 태그로 서버 코드 삽입)\n특징:\n절차적 프로그래밍 방식 객체지향 지원 거의 없음 디버깅과 유지보수가 어려움 성능이 낮고 보안 기능이 제한적 ⚙️ ASP.NET Razor (ASP.NET Core 포함)\r#\r출시 시기: 2010년대 이후, .NET Framework 및 .NET Core 기반\n언어 기반: C# 또는 VB.NET\n코드 구조: HTML과 C# 코드가 Razor 문법(@)으로 분리되어 있음\n특징:\nMVC 또는 Razor Pages 구조로 비즈니스 로직과 UI 분리 객체지향 프로그래밍 지원 강력한 디버깅, 보안, 성능 ViewModel을 통해 데이터 바인딩 HTML Helper, Tag Helper 등 다양한 도구 제공 🔍 핵심 차이 비교\r#\r항목 ASP Classic ASP.NET Razor 코드 스타일 절차적 객체지향, MVC 언어 VBScript C# 유지보수 어려움 쉬움 성능 낮음 높음 보안 제한적 강력함 UI/로직 분리 없음 있음 (Code-behind 또는 ViewModel) "}]